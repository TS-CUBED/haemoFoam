:PROPERTIES:
:ID:       b04e28ec-75ba-4763-82ad-4daac5fb7e1b
:END:
#+title: HaemoFOAM

=haeomFoam= is a Finite Volume code for blood flow simulations. It is written in `C++` using the OpenFOAM framework and includes some additional features:

-  non-Newtonian rheology models, in particular the Quemada model [cite:@Quemada1978b]  and a modified Krieger-Dougherty model [cite:@Hund2017], as well as the original Krieger model [cite:@Krieger1959].
- haematocrit transport model based on [cite:@Phillips1992]
- [[id:75506632-8499-46c2-ae1f-d0c8edaf174c][Haematocrit Transport Model]]  [cite:@Schenkel2021]
-  [[id:23fff1f7-9877-4280-9286-0fdaa2e3abc9][Windkessel BCs]] [cite:@Westerhof2009], adapted from code written by colleagues at Imperial College, London [cite:@Pirola2017]

* Installation

=haemoFoam= is developed on [[https://www.openfoam.com][ESI OpenFOAM]]. The current development version is v2106. It will not work on Foundation OpenFOAM, or of FOAM Extend. There are some conditional compiler statements in the code, which suggest that it does, but these versions are no longer maintained at the moment.

Installation of =haemoFoam= requires a full installation of OpenFOAM, including the development libraries, and C++ compiler. It has only been tested on [[https://www.ubuntu.com][Ubuntu Linux LTS]] (or derivatives like [[https://www.linuxmint.com][LinuxMint]], or [[https://pop.system76.com/][Pop!-OS LTS]] with OpenFOAM installed from the [[https://develop.openfoam.com/Development/openfoam/-/wikis/precompiled/debian][PPA]]. It should work on any other Linux based OpenFOAM installation, though (self-compiled on CentOS7 HPC cluster is one of the test-systems, as well).

- Download the latest release of =haemoFoam= (if you want to contribute to development, you can also clone the github repository, but keep in mind that I will update the code regularly, so things may break!).
- Unpack the archive into =~/OpenFOAM/yourUserName-vYYMM/applications/=
- Compile =haemoFoam= after initialising OpenFOAM:

  #+begin_src bash
    openfoam2106

    cd ~/OpenFOAM/$USER-v2106/applications/haemoFoam

    ./Allwmake
  #+end_src

  This will install =haemoFoam= for the current user in =~/OpenFOAM/$USER-v2106/platforms/linux.../bin=

** Binaries

=haemoFoam= comes with three executables:

1. =haemoSimpleFoam= - steady state solver
2. =haemoPimpleFoam= - transient solver, can be run in =PIMPLE= or =PISO= mode
3. =haemoPostProcess= - post-processing utility, calculates wall-shear-stress derived metrics. Needs =wallShearStress= fields to be calculated either at run-time (see [[Function Objects]]) or using the =-postProces= option[fn::Note that the postProcessing routine does not work with the windkessel boundary condition at the moment, so using the function object to write the =wallShearStress= field at run-time is the recommended way.)

** Models

=haemoFoam= includes the following models:

*** Viscosity models
:PROPERTIES:
:ID:       65525000-784e-4583-9324-4ca702f72b59
:END:

- *Carreau* (=libCarreau.so=) - implementation of the Carreau model as implemented in Fluent (to allow for one-to-one comparisons with Fluent). This model does NOT use the haematocrit transport model![fn::*Bird-Carreau* is available as an OpenFOAM model. All other OF viscosity models can be used as well. They will, however not link to the haematocrit model.]
- *KriegerDougherty* (=libKriegerDougherty.so=) - traditional Krieger-Dougherty model [cite:@Krieger1959].
- *Krieger5* (=libKrieger5.so=) - a modified 5-parameter Krieger model after [cite:@Hund2017].
- *Yeleswarapu* (=libYeleswarapu.so=) - Carreau-type model after [cite:@Yeleswarapu1998],[cite:@Wu2015a].
- *Quemada* (=libQuemada.so=) - the main development model. Based on [cite:@Quemada1977][cite:@Quemada1978a][cite:@Quemada1978b].

All but the Carreau model use the local haemotocrit and shear rate to calculate the viscosity.

Refer to [cite:@Schenkel2021] for details on the implementation.

*** Boundary conditions

- *WKBC* - 3-element windkessel boundary condition based on code written by Andris Piebalgs, Boram Gu, Emily Manchester, Imperial College London, who kindly let me have their [[https://github.com/KeepFloyding/OpenFOAM-phys-flow][original code]]. Implemented as part of =haemoPimpleFoam=[fn::This means that the =windkesselProperties= file must exist, even if these BC is not used. Will need to reimplement this in a cleaner way.].
- *splitFlowRateOutletVelocity* (=libSplitFlowRateOutletVelocity.so=) - A split flow rate outlet condition. Not recommended[fn::This BC is unphysiological. I would discourage it's use. It seems to have fallen out of favour recently, but there are many simulations - including some of mine - that use this BC if there is data from, e.g., echo doppler or similar. It can work in these cases, but I would recommend fixed pressure BCs if no windkessel data is available.], but included since there are many models out there that use this kind of BC. Forces outlet flow rate at the outlet to match a chosen percentage of the inlet flow rate.

* Case setup

=haemoFoam= cases are set up in a similar fashion as a regular =pimpleFoam= case. I will assume here, that you know how to do that and will focus on the differences:
** Loading the model libraries

The new models need to be loaded in =system/controlDict= in the =libs= section. E.g., to load the Quemada model, the flow split, and the Groovy[fn::groovyBC is part of the "Swiss Army Knife for Foam" (swak4Foam) toolkit, which I recommend.] BC, the =controlDict= file will start with:

#+begin_example
/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v1812                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/


FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

libs
(
    "libQuemada.so"
    "libgroovyBC.so"
    "libsplitFlowRateOutletVelocity.so"
);


application     haemoPimpleFoam;
#+end_example

** Haematocrit field

*** BCs

The H (haematocrit) field needs an initial and boundary condition file =0/H=. This contains the volume fraction of haematocrit (dimensionless).

- Inlet: =fixedValue= - give average H value. Alternatively you can give an H profile using something like =groovyBC=.
- Outlets: =inletOutlet= - should there be backflow on the outlet, we need to provide the H value for the inflow (otherwise this will be zero, which will cause instability).

- Walls: I use =slip= to allow arbitrary gradients, =fixedGradients= should work as well.

#+begin_example
/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2106                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/


FoamFile
{
    version     2.0;
    format      ascii;
    class       volScalarField;
    location    "0";
    object      H;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 0 0 0 0 0 0];

internalField   uniform 0.45;

boundaryField
{
    ICA
    {
        type            inletOutlet;
        inletValue      uniform 0.45;
        value           uniform 0.45;
    }
    ECA
    {
        type            inletOutlet;
        inletValue      uniform 0.45;
        value           uniform 0.45;
    }
    WALL
    {
        type            slip;
    }
    APEX
    {
        type            slip;
    }
    SINUS
    {
        type            slip;
    }
    CCA
    {
        type            fixedValue;
        value           uniform 0.45;
    }
}


// ************************************************************************* //
#+end_example

*** Solver settings

The haemotocrit field is simulated using a transport equation. This means it needs discretisation schemes for all terms set in =fvSchemes= and convergence criteria in =fvSolution. Refer to the tutorial case for examples.

** Boundary conditions

Most OpenFOAM boundary conditions are available in =haemoFoam= as well.

However, there is a limitation in the implementation of the windkessel boundary condition in =haemoFoam=. Even if this BC is not needed, the configuration file (=windkesselProperties=) needs to be present in the =constant= directory[fn::I will need to address this in an upcoming refactoring, but at the moment, I have decided to just leave it as is.].

Here I only describe the special boundary conditions in =haemoFoam=.

*** Windkessel Boundary Conditions

Windkessel BCs were implemented using code developed by Andris Piebalgs at Imperial College [cite:@Piebalgs2017,Piebalgs2018,Pirola2017].

The BCs are set in the boundary/initial condition directory =0= and in the =constant= directory in two files:

- the =p= boundary condition file (in =0=), where each WK outlet gets an entry of the form

    #+begin_src c++
  outlet_name
    {
        type            WKBC;
        index           0;
        value           uniform 0;
    }
   #+end_src

   where the =index= is a number that has to match the entry in

   - the =windkesselProperties= file (in =constant=), where the parameters are set:

#+BEGIN_SRC C++
/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  4.0                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     4.0;
    format      ascii;
    class       dictionary;
    object      windkesselProperties;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

outlet_1
{
    C                   10.1e-10;
    R                   17.1e+08;        // commonly R_2 or R_distal
    Z                   6.3e+07;         // commonly R_1 or R_proximal
    outIndex            0;               // must equal 'index' value in 0/p
    FDM_order           1;               // backward FD order: up to 3rd order

    // Initialise WK parameters
    // also useful to set initial condidions to speed up pressure development
    Flowrate_threeStepBefore        0;
    Flowrate_twoStepBefore          0;
    Flowrate_oneStepBefore          0;
    Pressure_twoStepBefore          0;
    Pressure_oneStepBefore          0;
    Pressure_start                  0;

}

outlet_2
{
    C                   4.1e-10;
    R                   41.7e+08;
    Z                   17.6e+07;
    outIndex            1;
    FDM_order           1;
    Flowrate_threeStepBefore        0;
    Flowrate_twoStepBefore          0;
    Flowrate_oneStepBefore          0;
    Pressure_twoStepBefore          0;
    Pressure_oneStepBefore          0;
    Pressure_start                  0;
}

// ************************************************************************* //
#+END_SRC

*Important Notes:*

- The order of the finite difference method to solve the windkessel equation can be set to up to third order. However for realistic cases, first order is sufficient, and higher orders can become unstable.
- The parameters for the windkessel properties are given in SI-units. In most publications these will be given in physiological units, e.g., $\left[ mm_{Hg}.ml^{-1}.s \right]$. These need to  be converted to SI-units!
- If the windkessel properties are not available, fixed relative pressures at the outlets are a reasonable alternative. A simple =fixedValue= BC with =value uniform 0= will give realistic flow distributions in most cases (based on diameter scaling).]

*** Flow split boundary conditions

These BCs are implemented to allow comparisons to some published cases that use Fluent split flow outlet condition. These BCs are typically unphysiological and can deliver unreliable results. They are typically employed where there are data available at the outlets, e.g., from echo or MRI flux measurements.

The flow split boundary condition works in cases where there is a single inlet[fn::could be extended to multiple inlets] and multiple outlets. One outlet needs to be set as a free outlet (=zeroGradient=) and the others are set as =splitFlowRateOutletVelocity= in =0/U=:

#+begin_example
/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v1812                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/


FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    location    "0";
    object      U;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 -1 0 0 0 0];

internalField   uniform (0 0 0.1);

boundaryField
{
    ICA
    {
        type            splitFlowRateOutletVelocity;
        inletPatch      "CCA";
        flowSplit       0.66;
        value           uniform ( 0 0 0.1 );
    }
    ECA
    {
        type            zeroGradient;
    }


....
#+end_example

The pressure BCs for this case are =zeroGradient= for the split flow outlets, and =fixedValue= for the free outlet (in =0/p=):

#+begin_example
/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v1812                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/


FoamFile
{
    version     2.0;
    format      ascii;
    class       volScalarField;
    location    "0";
    object      p;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 2 -2 0 0 0 0];

internalField   uniform 8.5;

boundaryField
{
    ICA
    {
        type            zeroGradient;
    }
    ECA
    {
        type            fixedValue;
        value           uniform 0;
    }

....
#+end_example


** Function Objects

There are a few things that we routinely look at when simulating blood flows. To save postprocessing time and file space, many of these can be written to text files at runtime. These can then be analysed and plotted without the need to load the field data.

The Wall Shear stress is a required one, the others are optional and are just the ones that I routinely use:

*** Wall Shear Stress (required for =haemoPostProcess=):

Wall shear stress is an important metric for haemodynamic simulation. OpenFOAM does not calculate WSS, but has a function object that will do that. This will take turbulence and non-Newtonian models into account and calculate WSS as $\nu_{eff} \frac{\partial\vec{u}}{\partial\vec{n}}$.

#+begin_example
wallShearStress
{
    // Mandatory entries (unmodifiable)
    type            wallShearStress;
    libs            (fieldFunctionObjects);

    // Optional entries (runtime modifiable)
    // patches         (WALL APEX SINUS); // (wall1 "(wall2|wall3)");

    // Optional (inherited) entries
    // writePrecision  8;
    // writeToFile     true;
    // useUserTime     true;
    // region          region0;
    // enabled         true;
    // log             true;
    // timeStart       0;
    // timeEnd         1000;
    // executeControl  timeStep;
    // executeInterval 1;
    writeControl    outputTime;

}
#+end_example

/Note: =writeControl outputTime;= synchronises the output of the field data with the output times of the rest of the data. Without this the wall shear stress data will be written every time step!/

=./postProcessing/wallShearStress/0/wallShearStress.dat= will contain min and max values for all patches - in this case also for the inlet/outlet patches, which can be ignored when plotting WSS in Paraview. In some cases these help avoid division by zero problems at the edges of the walls when calculating the WSS metrics.

#+begin_example
# Wall shear stress
# Time          patch           min             max
0.01            CCA     (-2.285838e-03 -2.083722e-03 -1.215122e-03)     (1.951771e-03 1.997152e-03 1.098803e-03)
0.01            ICA     (-4.724931e-03 -5.578844e-03 -2.057902e-03)     (5.158803e-03 5.917156e-03 1.551159e-03)
0.01            ECA     (-7.802540e-03 -5.654608e-03 -1.776018e-03)     (5.327658e-03 8.974748e-03 3.580220e-04)
0.01            APEX    (-7.673434e-03 -2.424255e-03 -5.991218e-03)     (2.045973e-03 1.787954e-03 -4.718725e-04)
0.01            SINUS   (-1.249938e-03 -1.057508e-03 -7.173346e-03)     (2.467540e-03 1.757495e-03 1.624837e-03)
0.01            WALL    (-4.859152e-03 -2.770018e-03 -1.472179e-02)     (3.020219e-03 1.545451e-03 1.980882e-03)
#+end_example

*** Average values on patches (e.g. inlet and outlet pressures)

Create a section in the =functions= block of =controlDict= for all patches of interest; all fields can be averaged.

E.g. averaging over the common carotid arterie outflow (patch name =CCA=):

#+begin_example
averagesCCA
{
    type            surfaceFieldValue;
    libs            ("libfieldFunctionObjects.so");
    enabled         yes;
    writeControl    timeStep;
    log             yes;
    writeFields     no;
    regionType      patch;
    name            CCA;
    operation       areaAverage;

    fields
    (
        p
        U
        H
    );
}
#+end_example

This file will be written to =./postProcessing/averagesCCA/<startTime>/0/surfaceFieldValue.dat=  and look like this:

#+begin_example
# Region type : patch CCA
# Faces       : 731
# Area        : 3.089305e-05
# Scale factor: 1.000000e+00
# Time          areaAverage(p)  areaAverage(U)  areaAverage(H)
0.001           2.747977e+01    (-2.650558e-09 -3.238202e-09 2.523065e-01)      4.500000e-01
0.002           2.370257e+00    (-2.673728e-09 -3.266508e-09 2.545120e-01)      4.500000e-01
0.003           9.029901e+00    (-2.697549e-09 -3.295612e-09 2.567795e-01)      4.500000e-01
0.004           9.070692e+00    (-2.722026e-09 -3.325515e-09 2.591095e-01)      4.500000e-01
0.005           9.100255e+00    (-2.747160e-09 -3.356221e-09 2.615020e-01)      4.500000e-01
#+end_example

Note that the velocity  is a vector in parenthesis. These can cause problems with some import filters. A helpful command for removing these parenthesis is =sed -e "s/[()]//g" surfaceFieldValue.dat > surfaceFieldValue_cleaned.dat=, or similar.

*** Flow Rates (volume flow)

These are similar to the averages. The flow rate can be calculated as the =sum= over the scalar flow =phi=. Calculating the outflow from the external carotid artery (ECA):

#+begin_example
flowRateECA
   {
        type            surfaceFieldValue;
        libs ("libfieldFunctionObjects.so");
        enabled         yes;
        writeControl    timeStep;
        writeInterval   1;
        log             yes;
        writeFields     no;
        regionType      patch;
        name            ECA;
        operation       sum;

        fields
        (
            phi
        );
   }
#+end_example

/Note: due to the orientation of the normal vector and since the volume flow is $(\vec{u} \cdot \vec{n})A$ flow into the volume is negative and flow out of the volume is positive!/

This file will be written to =./postProcessing/flowRateCCA/<startTime>/0/surfaceFieldValue.dat=  and look like this:

#+begin_example
# Region type : patch CCA
# Faces       : 731
# Area        : 3.089305e-05
# Scale factor: 1.000000e+00
# Time        	sumphi
0.001         	-7.794516e-06
0.002         	-7.862651e-06
0.003         	-7.932703e-06
0.004         	-8.004682e-06
0.005         	-8.078593e-06
#+end_example

*** Solver info

Some additional information, like residuals, can be written to a text file for each time step. Note that this is only of limited use for the PIMPLE solver, since it will use the residual information in the first PIMPLE loop, not the last.

#+begin_example
solverInfo
{
    type            solverInfo;
    libs            ("libutilityFunctionObjects.so");
    fields          (U H p);
    timeStart       3.01;
    writeResidualFields no;
}
#+end_example

/Note: Adjust the =timeStart= to be greater than the =haemoSwitch= value in =haemoTransportProperties=, so the =H= solver will run. Otherwise the =H= residual will not be recorded!/


* Post-Processing

** Calculation of WSS metrics

=haemoFOAM= has postprocessing routines for the most important wall-shear-stress (WSS) derived metrics that are used in atherosclerosis risk prediction.

These require data over the last cycle of the simulation. In the examples the cycle length is 1s and data was written every 0.01s, data for the 6th cycle (5.01s to 6s) is evaluated.

The postprocessing is done in two steps (only one for serial runs):

1. =reconstructPar= to reconstruct the data from the distributed run (only reconstructing last cycle, =processor= directories can be removed after this step to save hard drive space):

    #+begin_example sh
    reconstructPar -time 5.01:6
    #+end_example

2. =haemoPostProcess= calculates the other shear stress metrics:

   #+begin_example
   haemoPostProcess -time 5.01:6
   #+end_example

* Bibliography

#+bibliography: ~/library.json
#+print_bibliography: :heading none

- tags [[id:79cc5f18-b4b8-4fff-84ee-577054af077b][OpenFOAM]] [[id:7fcfb75c-5048-44cc-851f-3fe2ab29af74][CFD course]]


#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
